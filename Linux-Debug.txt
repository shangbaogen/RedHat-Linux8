编译内核的步骤:
---------------------------------------------------------------------
使用系统默认的x86_64配置文件配置内核,把生成的config文件放到0指定的目录
make 0=/tmp/linux-4.18.20-obj/ x86_64_defconfig

打开内核调试信息,同时关闭内核KASLR(否则无法打内核断点)
[*] Compile the kernel with debug info
[ ] Randomize the address of the kernel image (KASLR)

编译内核,并把输出文件放到0指定的目录
make 0=/tmp/linux-4.18.20-obj/ 


编译busybox的步骤:
-----------------------------------------------------
下载最新的稳定版busybox:
https://busybox.net/downloads/busybox-1.30.1.tar.bz2

解压文件busybox-1.30.1.tar.bz2
#tar xvf busybox-1.30.1.tar.bz2

配置文件:
#cd busybox-1.30.1
#make menuconfig
     Settings  --->
         [*] Build BusyBox as a static binary (no shared libs) //静态方式编译

编译busybox:
#make 

安装busybox:
#make install
执行完该命令后生成如下目录:
#/home/barry-shang/linux-4.18.20/busybox-1.30.1/_install

创建根文件系统:
-----------------------------------------------------------
#mkdir initramfs
#cp -r /home/barry-shang/linux-4.18.20/busybox-1.30.1/_install initramfs
#cd initramfs
#mkdir -pv {bin,sbin,etc,proc,sys,usr/{bin,sbin},dev}

init程序首先会访问etc/inittab文件，因此，我们需要编写inittab，指定开机需要启动的所有程序
#cd etc
#vim inittab
inittab文件的内容如下所示：
::sysinit:/etc/init.d/rcS   
::askfirst:-/bin/sh    
::restart:/sbin/init
::ctrlaltdel:/sbin/reboot
::shutdown:/bin/umount -a -r
::shutdown:/sbin/swapoff -a

赋予可执行权限
#chmod +x inittab

编写系统初始化命令
从inittab文件中可以看出，首先执行的是/etc/init.d/rcS脚本，因此，我们生成初始化脚本

#mkdir init.d
#cd init.d
#vim rcS
rcS文件的内容如下所示：
--------------------- 
#!/bin/sh

mount proc
mount -o remount,rw /
mount -a  
--------------------- 
赋予可执行权限
#chmod +x rcS
在rcS脚本中，mount -a 是自动挂载 /etc/fstab 里面的东西，可以理解为挂在文件系统，因此我们还需要编写 fstab文件来设置我们的文件系统。
#cd etc/
#vim fstab

fstab文件内容如下：
# /etc/fstab
proc            /proc        proc    defaults          0       0
sysfs           /sys         sysfs   defaults          0       0
devtmpfs        /dev         devtmpfs  defaults          0       0

至此，我们已经完成了RAM Disk中相关文件的配置，可以压缩生成文件镜像了。
---------------------------
$ find . -print0 | cpio --null -ov --format=newc | gzip -9 > ../initramfs.cpio.gz

使用qemu启动kernel和rootfs:
qemu-system-x86_64 -kernel linux-4.18.20/arch/x86/boot/bzImage -initrd ./initramfs.cpio.gz -append "console=ttyS0" -nographic

配置qemu启动命令:
qemu-system-x86_64 -m 1024M -smp 2 -kernel ./linux-4.18.20/arch/x86/boot/bzImage -initrd ./linux-4.18.20/rootfs/initramfs.cpio.gz -append "console=ttyS0 apic=debug" -nographic -S -s
-m  为此guest虚拟机预留的内存大小，如果不指定，默认大小是128M
-smp  表示guest虚拟机的cpu的个数

上面两个不是必须的参数选项。
-kernel 后面跟的是要调试的内核bzImage
-initrd  后面跟的是文件系统
-append 后面跟的是虚拟机的cmdline
-nographic  表示启动的是非图形界面的
-S 表示guest虚拟机一启动就会暂停
-s 表示监听tcp:1234端口等待GDB的连接
--------------------- 

printk_ratelimit()这个函数，其作用就如其名，限制printk的打印数量.
使用方法如下:

if(printk_ratelimit())
    printk("****");

该函数的速率控制根据两个文件来确定，分别是:
1. /proc/sys/kernel/printk_ratelimit 限制的时间间隔，默认值是5
2. /proc/sys/kernel/printk_ratelimit_burst 时间间隔内的最大打印条数，默认值是10
所以默认的打印速率是每5秒最多打印10条

Linux ps命令详解:
barry-shang@pek-bshang-d1:~/linux-4.18.20/vm$ ps aux
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root         1  0.0  0.0 185396  5556 ?        Ss   Sep30   1:04 /lib/systemd/systemd --system --deserialize 27
root         2  0.0  0.0      0     0 ?        S    Sep30   0:00 [kthreadd]
root         3  0.0  0.0      0     0 ?        S    Sep30   0:16 [ksoftirqd/0]
root         5  0.0  0.0      0     0 ?        S<   Sep30   0:00 [kworker/0:0H]
root         7  0.1  0.0      0     0 ?        S    Sep30 146:23 [rcu_sched]
root         8  0.0  0.0      0     0 ?        S    Sep30   0:00 [rcu_bh]
root         9  0.0  0.0      0     0 ?        S    Sep30   0:02 [migration/0]
root        10  0.0  0.0      0     0 ?        S    Sep30   0:19 [watchdog/0]
barry-s+ 25186  0.2  2.0 1430972 169696 ?      SLl  Nov19 132:02 /opt/google/chrome/chrome
barry-s+ 28386  0.0  0.0   4352   648 pts/21   T    14:36   0:00 ./HelloWorld-getchar

USER   用户名
PID    进程ID（Process ID）
%CPU   进程的cpu占用率
%MEM   进程的内存占用率
VSZ    进程所使用的虚存的大小（Virtual Size）
RSS    进程使用的驻留集大小或者是实际内存的大小，Kbytes字节。
TTY    与进程关联的终端（tty）
STAT   进程的状态：进程状态使用字符表示的（STAT的状态码）
R 运行     Runnable (on run queue)正在运行或在运行队列中等待。
S 睡眠     Sleeping 休眠中, 受阻, 在等待某个条件的形成或接受到信号。
I 空闲     Idle
Z 僵死     Zombie（a defunct process)进程已终止, 但进程描述符存在, 直到父进程调用wait4()系统调用后释放。
D 不可中断 Uninterruptible sleep (ususally IO)收到信号不唤醒和不可运行, 进程必须等待直到有中断发生。
T 终止     Terminate 进程收到SIGSTOP, SIGSTP, SIGTIN, SIGTOU信号后停止运行运行。
P 等待交换页
W 无驻留页 has no resident pages 没有足够的记忆体分页可分配。
X 死掉的进程
< 高优先级进程  
N 低优先级进程
L 内存锁页Lock有记忆体分页分配并缩在记忆体内
s 进程的领导者（在它之下有子进程）；
l 多进程的（使用 CLONE_THREAD, 类似 NPTL pthreads）
+ 位于后台的进程组 
START   进程启动时间和日期
TIME    进程使用的总cpu时间
COMMAND 正在执行的命令行命令

Linux alias命令：
命令结构：
alias name='string'
在命令"alias"之后，输入"name"，紧接着(没有空格)是一个等号，等号之后是一串用引号引起的字符串，字符串的内容要赋值给name
[pek-lpd-ccm1:~]$alias vlmstart
alias vlmstart='ssh -Y pek-hig2.wrs.com /folk/vlm/bin/vlmstart'
[pek-lpd-ccm1:~]$type vlmstart
vlmstart is aliased to `ssh -Y pek-hig2.wrs.com /folk/vlm/bin/vlmstart'
[pek-lpd-ccm1:~]$

Linux backport patches steps:
1.先使用git am命令打patch,如果失败使用patch -p1 < ~/test.patch打patch.
2.如果打不上patch,则手动修改.
3.修改完成后,使用git add ~/modify.file
4.使用git am --resolved再次应用,就能把原始patch的log打上.

编译gdb-8.2
#wget http://ftp.gnu.org/gnu/gdb/gdb-8.2.tar.gz
#tar xvf gdb-8.2.tar.gz
#vim gdb-8.2/gdb/remote.c
/*修改gdb-8.2源码，解决remote 'g' too long.*/
/* Further sanity checks, with knowledge of the architecture.  */
//if (buf_len > 2 * rsa->sizeof_g_packet)
// error (_("Remote 'g' packet reply is too long (expected %ld bytes, got %d "
//     "bytes): %s"), rsa->sizeof_g_packet, buf_len / 2, rs->buf);
if (buf_len > 2 * rsa->sizeof_g_packet) {
  rsa->sizeof_g_packet = buf_len;
  for (i = 0; i < gdbarch_num_regs (gdbarch); i++)
  {
      if (rsa->regs[i].pnum == -1)
          continue;
      if (rsa->regs[i].offset >= rsa->sizeof_g_packet)
          rsa->regs[i].in_g_packet = 0;
      else
          rsa->regs[i].in_g_packet = 1;
  }
}
#make
#make install

下载编译最新的qemu-3.1:
#wget https://download.qemu.org/qemu-3.1.0.tar.xz
#tar xvJf qemu-3.1.0.tar.xz
#cd qemu-3.1.0
#./configure --enable-debug --enable-kvm --target-list=x86_64-softmmu 
#make
#make install

/*新的qemu启动命令，指定根文件系*/
qemu-system-x86_64 -m 1024M -smp 2 -kernel /home/barry-shang/linux-4.18.20/git-hub/RedHat-Linux8/linux-4.18.20/arch/x86/boot/bzImage -initrd /home/barry-shang/linux-4.18.20/rootfs/initramfs.cpio.gz -append "console=ttyS0 apic=debug rdinit=/init root=/dev/sda" -nographic -drive if=ide,index=1,format=raw,file=/home/barry-shang/linux-4.18.20/rootfs/hda.img


/*挂在真实的文件系统*/
--------------------------------------------------
modprobe ata_piix

for x in $(cat /proc/cmdline); do
	case $x in
	root=*)
		ROOT=${x#root=}
		;;
	esac
done

echo ${ROOT}
mount ${ROOT} /root

echo "Change to real rootfs!"
exec switch_root -c /dev/console /root /sbin/init
--------------------------------------------------

创建qemu支持的硬盘镜像:
qemu-img create -f qcow2 Fedora-29.img 160G

使用Fedora-29安装系统:
qemu-system-x86_64 --enable-kvm -m 8192 -smp 8 -boot d -hda ./Fedora-29.img -cdrom ./Fedora-Workstation-Live-x86_64-29-1.2.iso

安装后启动硬盘上的系统:
qemu-system-x86_64 --enable-kvm -m 8192 -smp 8 -net nic -net user,hostfwd=tcp::32768-:22 -boot c -hda ./Fedora-29.img

在安装qemu的机器上使用ssh登陆该系统:
ssh -p 32768 barry@127.0.0.1

注释:
hostfwd=[tcp|udp]:[hostaddr]:hostport-[guestaddr]:guestport
将进入到主机端口的TCP或者UDP连接转发到客户机的某个地址和端口

hostfwd=tcp::32768-:22 将主机的32768端口的信息，转发到客户机的22端口.

#为qemu虚拟机增加硬盘分区
qemu-img create -f qcow2 disk.img 10G
-hdb /你的路径/disk.img

#Fedora-29需要安装的环境
sudo yum install gcc-c++
sudo yum install bison
sudo yum install texinfo

$准备工作分区与相应目录$
-----------------------------------------------------------------------------------
#为新分区创建文件系统
#mkfs.ext4 /dev/sdb

#在/mnt目录中创建lfs目录,然后挂载/dev/sdb到/mnt/lfs目录中:
#mkdir /mnt/lfs
#mount /dev/sdb /mnt/lfs
#export LFS=/mnt/lfs

在/mnt/lfs目录中,以root用户运行以下的命令来创建需要的文件夹：
#mkdir -v $LFS/tools
#mkdir -v $LFS/sources

#在宿主系统中创建/tools的符号链接,将其指向LFS分区中新建的目录：
#ln -sv $LFS/tools /
-----------------------------------------------------------------------------------

$添加LFS用户$
-----------------------------------------------------------------------------------
#groupadd lfs
#useradd -s /bin/bash -g lfs -m -k /dev/null lfs

#给lfs用户设置一个密码
#passwd lfs

#通过更改目录所有者为 lfs，为用户 lfs 赋予了访问 $LFS/tools 目录的所有权限：
#chown -v lfs $LFS/tools
#chown -v lfs $LFS/sources

#以lfs用户身份登录
$su - lfs
-----------------------------------------------------------------------------------


$设置环境$
-----------------------------------------------------------------------------------
#通过为bash shell创建两个开机启动的文件，设置合适的工作环境。当以lfs用户身份登录时，
#运行以下命令创建一个新的.bash_profile文件
cat > ~/.bash_profile << "EOF"
exec env -i HOME=$HOME TERM=$TERM PS1='\u:\w\$ ' /bin/bash
EOF

#创建.bashrc文件:
cat > ~/.bashrc << "EOF"
set +h
umask 022
LFS=/mnt/lfs
LC_ALL=POSIX
LFS_TGT=$(uname -m)-lfs-linux-gnu
PATH=/tools/bin:/bin:/usr/bin
export LFS LC_ALL LFS_TGT PATH
EOF

#启用刚才创建的用户配置，为构建临时工具完全准备好环境：
source ~/.bash_profile
-----------------------------------------------------------------------------------

编译binutils第一遍:
-----------------------------------------------------------------------------------
$tar xvf /mnt/lfs/sources/binutils-2.31.1.tar.xz
$cd binutils-2.31.1/
$mkdir build
$cd build/
$../configure --prefix=/tools  --with-sysroot=$LFS  --with-lib-path=/tools/lib  --target=$LFS_TGT  --disable-nls  --disable-werror
$make

如果是在x86_64上构建,创建符号链接,以确保工具链的完整性:
case $(uname -m) in
 x86_64) mkdir -v /tools/lib && ln -sv lib /tools/lib64 ;;
esac

$make install
-----------------------------------------------------------------------------------

编译gcc第一遍:
-----------------------------------------------------------------------------------
$tar xvf /mnt/lfs/sources/gcc-8.2.0.tar.xz
$cd gcc-8.2.0/
$./contrib/download_prerequisites

下面的指令将会修改GCC默认的动态链接器的位置,安装到/tools目录中的.并将/usr/include从
GCC的include检索路径中移除:
for file in gcc/config/{linux,i386/linux{,64}}.h
do
 cp -uv $file{,.orig}
 sed -e 's@/lib\(64\)\?\(32\)\?/ld@/tools&@g' \
 -e 's@/usr@/tools@g' $file.orig > $file
 echo '
#undef STANDARD_STARTFILE_PREFIX_1
#undef STANDARD_STARTFILE_PREFIX_2
#define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/"
#define STANDARD_STARTFILE_PREFIX_2 ""' >> $file
 touch $file.orig
done

在x86_64的主机上，为64位的库设置默认目录名至lib:
case $(uname -m) in
 x86_64)
 sed -e '/m64=/s/lib64/lib/' \
 -i.orig gcc/config/i386/t-linux64
 ;;
esac

$mkdir build
$cd build/
$../configure  --target=$LFS_TGT  --prefix=/tools  --with-glibc-version=2.28  --with-sysroot=$LFS  --with-newlib  --without-headers  --with-local-prefix=/tools  --with-native-system-header-dir=/tools/include  --disable-nls  --disable-shared  --disable-multilib  --disable-decimal-float  --disable-threads  --disable-libatomic  --disable-libgomp  --disable-libmpx  --disable-libquadmath  --disable-libssp  --disable-libvtv  --disable-libstdcxx  --enable-languages=c,c++

$make
$make install
-----------------------------------------------------------------------------------

安装linux内核头文件:
-----------------------------------------------------------------------------------
$tar xvf /mnt/lfs/sources/linux-4.18.20.tar.xz
$cd linux-4.18.20/
$make mrproper
$make INSTALL_HDR_PATH=dest headers_install
$cp -rv dest/include/* /tools/include
-----------------------------------------------------------------------------------

编译glibc:
-----------------------------------------------------------------------------------
$tar xvf /mnt/lfs/sources/glibc-2.28.tar.xz
$cd glibc-2.28/
$mkdir build
$cd build/
$../configure  --prefix=/tools  --host=$LFS_TGT  --build=$(../scripts/config.guess)  --enable-kernel=4.18.0  --with-headers=/tools/include
$make
$make install
-----------------------------------------------------------------------------------

编译GCC-8.2.0中的Libstdc++(依赖glibc):
-----------------------------------------------------------------------------------
$cd gcc-8.2.0/
$mv build build-first
$mkdir build
$../libstdc++-v3/configure  --host=$LFS_TGT  --prefix=/tools  --disable-multilib  --disable-nls  --disable-libstdcxx-threads  --disable-libstdcxx-pch  --with-gxx-include-dir=/tools/$LFS_TGT/include/c++/8.2.0
$make
$make install
-----------------------------------------------------------------------------------


编译binutils第二遍:
-----------------------------------------------------------------------------------
$cd binutils-2.31.1/
$mv build build-first
$mkdir build
$CC=$LFS_TGT-gcc AR=$LFS_TGT-ar RANLIB=$LFS_TGT-ranlib ../configure  --prefix=/tools  --disable-nls  --disable-werror  --with-lib-path=/tools/lib  --with-sysroot
$make 
$make install

为下一章「Re-adjusting」阶段准备链接器：
make -C ld clean
make -C ld LIB_PATH=/usr/lib:/lib
cp -v ld/ld-new /tools/bin
-----------------------------------------------------------------------------------

编译gcc第二遍:
-----------------------------------------------------------------------------------
$cd gcc-8.2.0/

#创建一个完整版本的内部头文件
$cat gcc/limitx.h gcc/glimits.h gcc/limity.h >  `dirname $($LFS_TGT-gcc -print-libgcc-file-name)`/include-fixed/limits.h

#更改GCC的默认动态链接器的位置,使用安装在/tools的那个
for file in gcc/config/{linux,i386/linux{,64}}.h
do
 cp -uv $file{,.orig}
 sed -e 's@/lib\(64\)\?\(32\)\?/ld@/tools&@g' \
 -e 's@/usr@/tools@g' $file.orig > $file
 echo '
#undef STANDARD_STARTFILE_PREFIX_1
#undef STANDARD_STARTFILE_PREFIX_2
#define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/"
#define STANDARD_STARTFILE_PREFIX_2 ""' >> $file
 touch $file.orig
done

#如果是在x86_64环境上构建,为64位库改变默认目录名至lib:
case $(uname -m) in
 x86_64)
 sed -e '/m64=/s/lib64/lib/' \
 -i.orig gcc/config/i386/t-linux64
 ;;
esac

#创建编译目录
$mv build build-libstdc++
$mkdir build
$cd build
$CC=$LFS_TGT-gcc CXX=$LFS_TGT-g++ AR=$LFS_TGT-ar RANLIB=$LFS_TGT-ranlib ../configure  --prefix=/tools  --with-local-prefix=/tools  --with-native-system-header-dir=/tools/include  --enable-languages=c,c++  --disable-libstdcxx-pch  --disable-multilib  --disable-bootstrap  --disable-libgomp
$make
$make install

#创建符号链接
$cd /tools/bin/
$ln -sv gcc /tools/bin/cc
-----------------------------------------------------------------------------------

向系统增加用户的sudoer使用权限:
## Allow root to run any commands anywhere 
root	ALL=(ALL) 	ALL
bshang  ALL=(ALL)       ALL
root    ALL = NOPASSWD: /bin/yum
